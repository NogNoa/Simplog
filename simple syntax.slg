/* Declaration Syntax */

keywords:
                        terms           statements
    defined/proved      def(ine)        pr(o)v(e)

    un[defin|prov]ed    prim(itive)     let
    
    well formed         form(ula)       syn(tax)

prim <statement>
prim <term>
syn {syn <statement>}
syn {form <term>?=<term>}

prim :
prim ;
prim |
form {<term>:<statement>}
syn {<term>;<statment>}

syn {prim <term>}
syn {let <statement>}

syn {def <term>;<statement>}

prim <type-term>
prim <object-term>
syn {<object-term> \is <type-term>}
form {<type-term> <object-term> ?= <object-term>: <object-term> \is <type-term>}
form {(<type-term> T) (<object-term> o) ?= o: o \is T}

prim <relation>
form {(<term> t): (<relation> r) (<term> g) ?= t:t r g}

/*
The type of a term need to be mentioned only if it's not implied from syntax of a positive statement regarding it. The statement hold true for all implied types.

Terms that are in english rather than symbolic have to be enclosed by <>, following the example of BNF.
Escaped english words are stand-ins for symbols so they don't have to have to be enclosed by them.

The keywords and ; require enclosing their compound arguments (statements or terms) in {} rather than (). The arguments of : could be eclosed by just ().

Overloading is possible, that is- defining a term multiple times for different contexts

{prim <object-term> O} imply {\exist O}
*/

/* Argument syntax */

syn {<statement> \trfr <statement>}
syn {prv {<statement> T|{<statement> S \trfr T}}}
syn {prv {<statement> T|{\not T \trfr false}}}
syn {prv {<statement> S \than <statement> T|{S \trfr T}}}

/*
\trfr is transitive. so {A \trfr B \trfr C} could be reduced to {A \trfr C}

\trfr is also enclosed in {}
*/
