keywords:
						terms		statements
	defined/proved		def(ine)	pr(o)v(e)

	un[defin|prov]ed	prim(itive)	let
	
	well formed			form(ula)	syn(tax)

prim <statement>
prim <term>
syn {syn <statement>}
syn {form <term>}

prim :
prim ;
prim |
form {<term>:<statement>}
syn {<term>;<statment>}
syn {<statement>|<statement>}

syn {prim <term>}
syn {let <statement>}

syn {def <term>;<statement>}
syn {prv <statement>|<statement>}

prim <type-term>
prim <object-term>
form {<type-term> <object-term>}
)def {\is;{\all <type-term> T; {\all T <object-term> o; o \is T}}}

prim <WF>
let {<statement> S \is <WF> \iff {syn S}} 

/*
the type of a term need to be mentioned only if it's not implied from syntax of a positive statement regarding it. and the statement hold true for all implied types.

terms that are in english rather than symbolic have to have <>, following the example of BNF
escaped english words are stand-ins for symbols so they don't have to have them.

the keywords and ; and : require enclosing their compound arguments (statements or terms) in {} rather than ()
*/
