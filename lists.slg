def {<list>; {t:: <type-term>; (<list> t)= '{x,v: x \is t \and v \is (<list> t)} \union t}}
def {... ; {t:: <type-term>; (x,... : x:: t) ?= (<list> t)}}
form {f(@l): {l:: (<list> t): {t \is <type-term>}, f <function>:{f \on t}}}
form {l:: (<list> t), e t; f(@(e,l)) ?= (f(e),f(@l))}

let {\all t:: <type-term>; {\all l: \is (<list> t); l \is <list>}}

form {\all t::<type-term>;{\all l:: (<list> t); {\all x: \is \NN \and \exist l[x]; l[x] \is t}}}
form {\all t::<type-term>;{\all l:: (<list> t); l[0] ?= (a:: t : {\exist v:: (<list> t): l=a,v})}}

form {\all t::<type-term>;{\all l:: (<list> t); {\all x,y: \is \NN \and \exist l[x..y]; l[x..y] \is (list t)}}}
form {τ|{\all l:: <list>; \exist τ: l[0..τ] ?= l}}}
def {\all l:: <list>, x:: \NN; \exist l[x] \iff {x >= 0 \and τ > x}}
def {\all l:: <list>, x,y:: \NN; \exist l[x..y] \iff {x >= 0 \and y >= x \and τ > y}}


form {\all t::<type-term>;{ l:: (<list> t); l[1..τ] ?= (v:: (<list> t) : {\exist a:: t: l=a,v})}}


form {\all t::<type-term>;{ l:: (<list> t); l[τ-1] ?= (a:: t : {\exist v:: (<list> t): l=v,a})}}
form {\all t::<type-term>;{ l:: (<list> t); l[0..-1] ?= (v:: (<list> t) : {\exist a:: t: l=v,a})}}

def {<koinon>; {t:: <type-term>, r:: (k: k \is <operator> \or k \is <relation>); (<koinon> r t)= '{xrv: x \is t \and v \is (<koinon> r t)} \union t}}
def {<flush>; {t:: <type-term>; (<flush> t)= '{xv: x \is t \and v \is (<flush> t)} \union t}}



def {<list>:: <type-term>; {\all t:: <type-term>; {\exist (<list> t):\sbst <list>}}
def {(<list> t):: <type-term>; {t:: <type-term>; (<list> t)= '{x,v: x \is t \and v \is (<list> t)} \union t}}

let {\all l,r:: <list>; \exist (l,r):: <list>}
def {[0]:: <unary-operator>; {\all t:: <type-term>; {\all x:: t, v::(<list> t); {(l:: (<list> t):=(x,v)); l[0]=x}}}}
def {[]:: <operator>; {\all t:: <type-term>; {\all x:: t, v,u::(<list> t); {l:: (<list> t), i:: \NN :{l=(u,x,v), and x=l[i]};  l[i+1]=v[0]}}}}

def {len:: function; {\all t:: <type-term>; {{\all x:: t; len(x)=1} \and {\all v,u:: (<list> t); {len(v,u) = len(v) + len(u)}}}}}
let {\all l <list>; {\all i:: \NN :\< len(l); \exist l[i]}}
form {[τ]; {\all l:: <list>; l[τ]?= l[len(l)]}}

def <range>:: <type-term>
def {..:: <operator>; \all i,j:: \NN: j>i; {i..j \is <range>}}
def {[]:: <operator>; {\all l:: <list>, i,j:: \NN: (len(l)>j>i); \exist (l[i..j]:: <list>)}}
let {\all l:: <list>; l[0..τ]=l}
let {\all l:: <list>, i,j:: \NN; {l[i..j] = l[i],l[i+1..j] = l[i..j-1],l[j]}}
